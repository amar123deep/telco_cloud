{"changed":true,"filter":false,"title":"Coordinator.py","tooltip":"/Simulator_Coarse/Coordinator.py","value":"import logging\n\nclass Coordinator(object):\n\t'''\n\tDescr : coordinates workload changes\n\t'''\n\tdef __init__(self, env, topology, scheduler):\n\t\tself.env = env\n\t\tself.topology = topology\n\t\tself.scheduler = scheduler\n\t\tself.registry = {}\n\n\t\t#env.process(self.clearResources())\n\n\tdef getAppPlacement(self, appName):\n\t\tassert appName in self.registry, \"Application not scheduled\"\n\t\treturn self.registry[appName].keys()[0]\n\n\tdef revaluateAll(self):\n\t\ttargetApps = {}\n\n\t\tfor leaf in self.topology.getAllLeafs():\n\t\t\tleafName = leaf.getName()\n\t\t\tfor appName, demandDict in leaf.getAppDemand().iteritems():\n\t\t\t\tif appName not in targetApps:\n\t\t\t\t\ttargetApps[appName] = {}\n\n\t\t\t\ttotalDemand = 0\n\n\t\t\t\tfor demandType, demand in demandDict.iteritems():\n\t\t\t\t\ttotalDemand += demand\n\n\t\t\t\ttargetApps[appName].update( {leafName: totalDemand} ) \n\n\t\ttargetConstellations = {}\n\t\t\n\t\tfor appName, totalAppDemand in targetApps.iteritems():\n\t\t\ttargetConstellations[appName] = (totalAppDemand, self.topology.getAllDCs())\n\n\t\tfor (appName, dcLeafDict) in self.scheduler.fnSchedule(targetConstellations):\n\t\t\tfor dcName in dcLeafDict:\n\t\t\t\tif dcName is not None:\n\t\t\t\t\tfor currentDC in dcLeafDict.keys():\n\t\t\t\t\t\tif currentDC not in self.registry[appName]:\n\t\t\t\t\t\t\tprint \"%s - %s migrated from %s to %s\" % (self.env.now, appName, self.registry[appName].keys(), dcLeafDict.keys())\n\t\t\t\t\t\t\tfor currentDCName in self.registry[appName]:\n\t\t\t\t\t\t\t\tself.clearPaths(appName, currentDCName)\n\t\t\t\t\t\t\tself.updateDemand(appName, dcName, targetApps[appName])\n\t\t\t\t\t\t\tself.registry[appName] = dcLeafDict # Update app registry \n\n\t'''\n\t######## Migration ########\n\t'''\n\tdef migrate(self, appName, fromNodeName, toNodenName):\n\t\tpath = self.topology.findMinPath(fromNodeName, toNodenName)\n\n\t\tdemand = path[0].getAppDemand(appName,'PRODUCTION')\n\n\t\tduration = 2\n\n\t'''\n\tClear all previous paths\n\t'''\n\tdef clearPaths(self, appName, dcName):\n\t\tleafNames = self.topology.getAllLeafNames()\n\t\tfor leafName in leafNames:\n\t\t\tpath = self.topology.getPath(appName, leafName, dcName)\n\t\t\tfor entity in path:\n\t\t\t\t#print \"%s overload Before : %s\" % (entity.getName(), entity.getOverloadFactor())\n\t\t\t\tentity.clearDemand(appName)\n\t\t\t\t#print \"%s overload After : %s\" % (entity.getName(), entity.getOverloadFactor())\n\n\t'''\n\tUpdate demand\n\t'''\n\tdef updateDemand(self, appName, dcName, leafDemand):\n\t\tfor leafName, leafDemand in leafDemand.iteritems():\n\t\t\tpath = self.topology.getPath(appName, leafName, dcName)\n\t\t\tfor entity in path:\n\t\t\t\tentity.updateDemand(appName, leafName, {'PRODUCTION':leafDemand})\n\n\t\n\tdef process(self,appWorkload):\n\t\t'''\n\t\t\n\t\t'''\n\t\tlogging.debug('%s - Handling apps: %s, runnings apps: %s ' % (type(self).__name__, str(appWorkload.keys()), str(self.registry.keys())))\n\t\t# All apps from workload at current time instant \n\t\tcurrentAPPlist = appWorkload.keys()\n\t\t# we store apps that's need to be scheduled and are absent in the registry\n\t\tappsNotScheduled = {}\n\t\t\n\t\t\n\t\t\n\t\t\n\t'''\n\tThis can propbably be done more beutiful, but only necessary if we will publish the code. :)\n\t'''\n\tdef getPath_v1(self, appWorkload): # { ... {appName: {leaf: nbrUsers}}...}\n\t\tlogging.debug('%s - Handling apps: %s, runnings apps: %s ' % (type(self).__name__, str(appWorkload.keys()), str(self.registry.keys())))\n\t\t'''\n\t\tDescr : A generator function, yield results and resumes, so iterate over \n\t\t\t\tthis function when you use it. \n\t\t'''\n\t\t# All apps from workload at current time instant \n\t\tcurrentAPPlist = appWorkload.keys()\n\t\t# we store apps that's need to be scheduled and are absent in the registry\n\t\tappsNotScheduled = {}\n\t\tfor appName, nodeUser in appWorkload.iteritems(): # appName , {leaf: nbrUsers}\n\t\t\tlogging.debug('%s - Evaluating %s' % (type(self).__name__, appName))\n\n\t\t\tif appName not in self.registry: \n\t\t\t\tappsNotScheduled[appName] = (nodeUser, self.topology.getAllDCs()) \n\t\t\t\tlogging.debug('%s - %s is NOT running : Net runnings apps %s' % (type(self).__name__, appName, str(appsNotScheduled.keys())))\n\n\t\t\telse:\n\t\t\t\tlogging.debug('%s - %s is running' % (type(self).__name__, appName))\n\t\t\t\t# change here\n\t\t\t\tdcLeafDict = self.registry[appName]\n\t\t\t\tfor dcName, prevLeafList in dcLeafDict.iteritems():\n\t\t\t\t\tcurrentLeafList = nodeUser.keys()\n\t\t\t\t\t# Leafs with workload 0 to be updated \n\t\t\t\t\tdiffLeaf = set(prevLeafList)-set(currentLeafList)\n\t\t\t\t\tfor x in diffLeaf:\n\t\t\t\t\t\tnodeUser[x] = 0\n\t\t\t\t\tfor leafNodeName, nbrUsrs in nodeUser.iteritems():\n\t\t\t\t\t\tpath = self.topology.getPath( appName, leafNodeName, dcName )\n\t\t\t\t\t\tpathName = [] \n\t\t\t\t\t\tfor varPath in path: \n\t\t\t\t\t\t\tpathName.append(varPath.getName())\n\t\t\t\t\t\tlogging.debug('%s - Node: %s, User: %d'%(type(self).__name__, leafNodeName,nbrUsrs))\n\t\t\t\t\t\tlogging.debug('%s - Returning path for %s from %s and %s with %i users: %s' % (type(self).__name__, appName, leafNodeName, dcName, nbrUsrs, str(pathName)))\n\t\t\t\t\t\tyield (path, appName, leafNodeName, nbrUsrs)\n\n\t\tlogging.debug('%s - Current apps from workload: %s' % (type(self).__name__, str(currentAPPlist)))\n\t\tremoveAppDClist = []\n\t\tfor appName, dcLeafDict in self.registry.iteritems():\n\t\t\tfor dcName in dcLeafDict.keys():\n\t\t\t\tif appName not in currentAPPlist:\n\t\t\t\t\t# remove from the registry\n\t\t\t\t\tremoveAppDClist.append((appName,dcName) )\n\t\t\t\t\t# ask scheduler to remove also from the topology table\n\t\t\tlogging.debug('%s - apps need to be removed: %s' % (type(self).__name__, str(removeAppDClist)))\n\t\tfor (appName,name) in removeAppDClist: \n\t\t\tdel self.registry[appName]\n\n\t\tself.scheduler.removeDC(removeAppDClist)\n\t\n\t\tlogging.debug('%s - apps needs to be scheduled : %s ' % (type(self).__name__, str(appsNotScheduled.keys())))\n\n\t\tfor (appName, dcLeafDict) in self.scheduler.fnSchedule(appsNotScheduled):\n\t\t\tfor dcName in dcLeafDict:\n\t\t\t\tif dcName is not None:\n\t\t\t\t\t# Update app registry \n\t\t\t\t\tself.registry[appName] = dcLeafDict  \n\t\t\t\t\t(nodeUser, placementOptions) = appsNotScheduled[appName]\n\t\t\t\t\t\n\t\t\t\t\tfor leafNodeName, nbrUsrs in nodeUser.iteritems(): \n\t\t\t\t\t\tyield (self.topology.getPath(appName, leafNodeName, dcName), appName, leafNodeName, nbrUsrs)","undoManager":{"mark":45,"position":100,"stack":[[{"group":"doc","deltas":[{"start":{"row":95,"column":7},"end":{"row":95,"column":8},"action":"insert","lines":["t"]}]}],[{"group":"doc","deltas":[{"start":{"row":95,"column":8},"end":{"row":95,"column":9},"action":"insert","lines":["P"]}]}],[{"group":"doc","deltas":[{"start":{"row":95,"column":9},"end":{"row":95,"column":10},"action":"insert","lines":["a"]}]}],[{"group":"doc","deltas":[{"start":{"row":95,"column":10},"end":{"row":95,"column":11},"action":"insert","lines":["t"]}]}],[{"group":"doc","deltas":[{"start":{"row":95,"column":11},"end":{"row":95,"column":12},"action":"insert","lines":["h"]}]}],[{"group":"doc","deltas":[{"start":{"row":95,"column":12},"end":{"row":95,"column":13},"action":"insert","lines":["("]}]}],[{"group":"doc","deltas":[{"start":{"row":95,"column":13},"end":{"row":95,"column":14},"action":"insert","lines":[")"]}]}],[{"group":"doc","deltas":[{"start":{"row":95,"column":13},"end":{"row":95,"column":14},"action":"insert","lines":["s"]}]}],[{"group":"doc","deltas":[{"start":{"row":95,"column":14},"end":{"row":95,"column":15},"action":"insert","lines":["e"]}]}],[{"group":"doc","deltas":[{"start":{"row":95,"column":15},"end":{"row":95,"column":16},"action":"insert","lines":["l"]}]}],[{"group":"doc","deltas":[{"start":{"row":95,"column":16},"end":{"row":95,"column":17},"action":"insert","lines":["f"]}]}],[{"group":"doc","deltas":[{"start":{"row":95,"column":17},"end":{"row":95,"column":18},"action":"insert","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":95,"column":17},"end":{"row":95,"column":18},"action":"remove","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":95,"column":17},"end":{"row":95,"column":18},"action":"insert","lines":[","]}]}],[{"group":"doc","deltas":[{"start":{"row":95,"column":18},"end":{"row":95,"column":19},"action":"insert","lines":["a"]}]}],[{"group":"doc","deltas":[{"start":{"row":95,"column":19},"end":{"row":95,"column":20},"action":"insert","lines":["p"]}]}],[{"group":"doc","deltas":[{"start":{"row":95,"column":20},"end":{"row":95,"column":21},"action":"insert","lines":["p"]}]}],[{"group":"doc","deltas":[{"start":{"row":95,"column":18},"end":{"row":95,"column":21},"action":"remove","lines":["app"]},{"start":{"row":95,"column":18},"end":{"row":95,"column":29},"action":"insert","lines":["appWorkload"]}]}],[{"group":"doc","deltas":[{"start":{"row":95,"column":30},"end":{"row":95,"column":31},"action":"insert","lines":[":"]}]}],[{"group":"doc","deltas":[{"start":{"row":95,"column":31},"end":{"row":96,"column":0},"action":"insert","lines":["",""]},{"start":{"row":96,"column":0},"end":{"row":96,"column":2},"action":"insert","lines":["\t\t"]}]}],[{"group":"doc","deltas":[{"start":{"row":89,"column":1},"end":{"row":93,"column":1},"action":"remove","lines":["def createListofPath(self): ","\t\td","\t\tfor app,node in registry.iteritems(): ","\t\t\t","\t"]}]}],[{"group":"doc","deltas":[{"start":{"row":89,"column":0},"end":{"row":89,"column":1},"action":"remove","lines":["\t"]}]}],[{"group":"doc","deltas":[{"start":{"row":88,"column":0},"end":{"row":89,"column":0},"action":"remove","lines":["",""]}]}],[{"group":"doc","deltas":[{"start":{"row":91,"column":0},"end":{"row":91,"column":1},"action":"insert","lines":["\t"]}]}],[{"group":"doc","deltas":[{"start":{"row":91,"column":2},"end":{"row":91,"column":3},"action":"insert","lines":["l"]}]}],[{"group":"doc","deltas":[{"start":{"row":91,"column":2},"end":{"row":91,"column":3},"action":"remove","lines":["l"]}]}],[{"group":"doc","deltas":[{"start":{"row":91,"column":2},"end":{"row":91,"column":3},"action":"remove","lines":["\t"]}]}],[{"group":"doc","deltas":[{"start":{"row":91,"column":1},"end":{"row":91,"column":2},"action":"remove","lines":["\t"]}]}],[{"group":"doc","deltas":[{"start":{"row":91,"column":1},"end":{"row":91,"column":2},"action":"insert","lines":["\t"]}]}],[{"group":"doc","deltas":[{"start":{"row":91,"column":2},"end":{"row":91,"column":137},"action":"insert","lines":["logging.debug('%s - Handling apps: %s, runnings apps: %s ' % (type(self).__name__, str(appWorkload.keys()), str(self.registry.keys())))"]}]}],[{"group":"doc","deltas":[{"start":{"row":91,"column":137},"end":{"row":92,"column":0},"action":"insert","lines":["",""]},{"start":{"row":92,"column":0},"end":{"row":92,"column":2},"action":"insert","lines":["\t\t"]}]}],[{"group":"doc","deltas":[{"start":{"row":92,"column":2},"end":{"row":93,"column":0},"action":"insert","lines":["",""]},{"start":{"row":93,"column":0},"end":{"row":93,"column":2},"action":"insert","lines":["\t\t"]}]}],[{"group":"doc","deltas":[{"start":{"row":92,"column":2},"end":{"row":95,"column":23},"action":"insert","lines":["# All apps from workload at current time instant ","\t\tcurrentAPPlist = appWorkload.keys()","\t\t# we store apps that's need to be scheduled and are absent in the registry","\t\tappsNotScheduled = {}"]}]}],[{"group":"doc","deltas":[{"start":{"row":95,"column":23},"end":{"row":96,"column":0},"action":"insert","lines":["",""]},{"start":{"row":96,"column":0},"end":{"row":96,"column":2},"action":"insert","lines":["\t\t"]}]}],[{"group":"doc","deltas":[{"start":{"row":90,"column":31},"end":{"row":91,"column":0},"action":"insert","lines":["",""]},{"start":{"row":91,"column":0},"end":{"row":91,"column":2},"action":"insert","lines":["\t\t"]}]}],[{"group":"doc","deltas":[{"start":{"row":91,"column":2},"end":{"row":91,"column":3},"action":"insert","lines":["'"]}]}],[{"group":"doc","deltas":[{"start":{"row":91,"column":3},"end":{"row":91,"column":4},"action":"insert","lines":["'"]}]}],[{"group":"doc","deltas":[{"start":{"row":91,"column":4},"end":{"row":91,"column":5},"action":"insert","lines":["'"]}]}],[{"group":"doc","deltas":[{"start":{"row":91,"column":5},"end":{"row":92,"column":0},"action":"insert","lines":["",""]},{"start":{"row":92,"column":0},"end":{"row":92,"column":2},"action":"insert","lines":["\t\t"]}]}],[{"group":"doc","deltas":[{"start":{"row":92,"column":2},"end":{"row":92,"column":3},"action":"insert","lines":["'"]}]}],[{"group":"doc","deltas":[{"start":{"row":92,"column":3},"end":{"row":92,"column":4},"action":"insert","lines":["'"]}]}],[{"group":"doc","deltas":[{"start":{"row":92,"column":4},"end":{"row":92,"column":5},"action":"insert","lines":["'"]}]}],[{"group":"doc","deltas":[{"start":{"row":91,"column":5},"end":{"row":92,"column":0},"action":"insert","lines":["",""]},{"start":{"row":92,"column":0},"end":{"row":92,"column":2},"action":"insert","lines":["\t\t"]}]}],[{"group":"doc","deltas":[{"start":{"row":59,"column":0},"end":{"row":67,"column":0},"action":"remove","lines":["","\t\t#for element in path:","\t\t#\telement.incurrTempDemand(appName, 0, duration)","","\t\t#yield self.env.timeout(duration)","\t\t# Unregister application","\t\t# Remove old paths","\t\t# Register application in new DC",""]}]}],[{"group":"doc","deltas":[{"start":{"row":81,"column":1},"end":{"row":82,"column":0},"action":"insert","lines":["",""]},{"start":{"row":82,"column":0},"end":{"row":82,"column":1},"action":"insert","lines":["\t"]}]}],[{"group":"doc","deltas":[{"start":{"row":81,"column":1},"end":{"row":81,"column":2},"action":"insert","lines":["d"]}]}],[{"group":"doc","deltas":[{"start":{"row":81,"column":2},"end":{"row":81,"column":3},"action":"insert","lines":["e"]}]}],[{"group":"doc","deltas":[{"start":{"row":81,"column":3},"end":{"row":81,"column":4},"action":"insert","lines":["f"]}]}],[{"group":"doc","deltas":[{"start":{"row":81,"column":4},"end":{"row":81,"column":5},"action":"insert","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":81,"column":5},"end":{"row":81,"column":6},"action":"insert","lines":["p"]}]}],[{"group":"doc","deltas":[{"start":{"row":81,"column":6},"end":{"row":81,"column":7},"action":"insert","lines":["r"]}]}],[{"group":"doc","deltas":[{"start":{"row":81,"column":7},"end":{"row":81,"column":8},"action":"insert","lines":["o"]}]}],[{"group":"doc","deltas":[{"start":{"row":81,"column":8},"end":{"row":81,"column":9},"action":"insert","lines":["c"]}]}],[{"group":"doc","deltas":[{"start":{"row":81,"column":9},"end":{"row":81,"column":10},"action":"insert","lines":["e"]}]}],[{"group":"doc","deltas":[{"start":{"row":81,"column":10},"end":{"row":81,"column":11},"action":"insert","lines":["s"]}]}],[{"group":"doc","deltas":[{"start":{"row":81,"column":11},"end":{"row":81,"column":12},"action":"insert","lines":["s"]}]}],[{"group":"doc","deltas":[{"start":{"row":81,"column":12},"end":{"row":81,"column":13},"action":"insert","lines":["W"]}]}],[{"group":"doc","deltas":[{"start":{"row":81,"column":13},"end":{"row":81,"column":14},"action":"insert","lines":["o"]}]}],[{"group":"doc","deltas":[{"start":{"row":81,"column":14},"end":{"row":81,"column":15},"action":"insert","lines":["r"]}]}],[{"group":"doc","deltas":[{"start":{"row":81,"column":15},"end":{"row":81,"column":16},"action":"insert","lines":["k"]}]}],[{"group":"doc","deltas":[{"start":{"row":81,"column":16},"end":{"row":81,"column":17},"action":"insert","lines":["l"]}]}],[{"group":"doc","deltas":[{"start":{"row":81,"column":17},"end":{"row":81,"column":18},"action":"insert","lines":["o"]}]}],[{"group":"doc","deltas":[{"start":{"row":81,"column":18},"end":{"row":81,"column":19},"action":"insert","lines":["a"]}]}],[{"group":"doc","deltas":[{"start":{"row":81,"column":19},"end":{"row":81,"column":20},"action":"insert","lines":["d"]}]}],[{"group":"doc","deltas":[{"start":{"row":81,"column":20},"end":{"row":81,"column":21},"action":"insert","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":81,"column":20},"end":{"row":81,"column":21},"action":"remove","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":81,"column":19},"end":{"row":81,"column":20},"action":"remove","lines":["d"]}]}],[{"group":"doc","deltas":[{"start":{"row":81,"column":18},"end":{"row":81,"column":19},"action":"remove","lines":["a"]}]}],[{"group":"doc","deltas":[{"start":{"row":81,"column":17},"end":{"row":81,"column":18},"action":"remove","lines":["o"]}]}],[{"group":"doc","deltas":[{"start":{"row":81,"column":16},"end":{"row":81,"column":17},"action":"remove","lines":["l"]}]}],[{"group":"doc","deltas":[{"start":{"row":81,"column":15},"end":{"row":81,"column":16},"action":"remove","lines":["k"]}]}],[{"group":"doc","deltas":[{"start":{"row":81,"column":14},"end":{"row":81,"column":15},"action":"remove","lines":["r"]}]}],[{"group":"doc","deltas":[{"start":{"row":81,"column":13},"end":{"row":81,"column":14},"action":"remove","lines":["o"]}]}],[{"group":"doc","deltas":[{"start":{"row":81,"column":12},"end":{"row":81,"column":13},"action":"remove","lines":["W"]}]}],[{"group":"doc","deltas":[{"start":{"row":81,"column":11},"end":{"row":81,"column":12},"action":"remove","lines":["s"]}]}],[{"group":"doc","deltas":[{"start":{"row":81,"column":10},"end":{"row":81,"column":11},"action":"remove","lines":["s"]}]}],[{"group":"doc","deltas":[{"start":{"row":81,"column":9},"end":{"row":81,"column":10},"action":"remove","lines":["e"]}]}],[{"group":"doc","deltas":[{"start":{"row":81,"column":8},"end":{"row":81,"column":9},"action":"remove","lines":["c"]}]}],[{"group":"doc","deltas":[{"start":{"row":81,"column":7},"end":{"row":81,"column":8},"action":"remove","lines":["o"]}]}],[{"group":"doc","deltas":[{"start":{"row":81,"column":6},"end":{"row":81,"column":7},"action":"remove","lines":["r"]}]}],[{"group":"doc","deltas":[{"start":{"row":81,"column":5},"end":{"row":81,"column":6},"action":"remove","lines":["p"]}]}],[{"group":"doc","deltas":[{"start":{"row":81,"column":4},"end":{"row":81,"column":5},"action":"remove","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":81,"column":3},"end":{"row":81,"column":4},"action":"remove","lines":["f"]}]}],[{"group":"doc","deltas":[{"start":{"row":81,"column":2},"end":{"row":81,"column":3},"action":"remove","lines":["e"]}]}],[{"group":"doc","deltas":[{"start":{"row":81,"column":1},"end":{"row":81,"column":2},"action":"remove","lines":["d"]}]}],[{"group":"doc","deltas":[{"start":{"row":81,"column":0},"end":{"row":81,"column":1},"action":"remove","lines":["\t"]}]}],[{"group":"doc","deltas":[{"start":{"row":80,"column":0},"end":{"row":81,"column":0},"action":"remove","lines":["",""]}]}],[{"group":"doc","deltas":[{"start":{"row":82,"column":11},"end":{"row":82,"column":12},"action":"remove","lines":["h"]}]}],[{"group":"doc","deltas":[{"start":{"row":82,"column":10},"end":{"row":82,"column":11},"action":"remove","lines":["t"]}]}],[{"group":"doc","deltas":[{"start":{"row":82,"column":9},"end":{"row":82,"column":10},"action":"remove","lines":["a"]}]}],[{"group":"doc","deltas":[{"start":{"row":82,"column":8},"end":{"row":82,"column":9},"action":"remove","lines":["P"]}]}],[{"group":"doc","deltas":[{"start":{"row":82,"column":7},"end":{"row":82,"column":8},"action":"remove","lines":["t"]}]}],[{"group":"doc","deltas":[{"start":{"row":82,"column":6},"end":{"row":82,"column":7},"action":"remove","lines":["e"]}]}],[{"group":"doc","deltas":[{"start":{"row":82,"column":5},"end":{"row":82,"column":6},"action":"remove","lines":["g"]}]}],[{"group":"doc","deltas":[{"start":{"row":82,"column":5},"end":{"row":82,"column":6},"action":"insert","lines":["p"]}]}],[{"group":"doc","deltas":[{"start":{"row":82,"column":6},"end":{"row":82,"column":7},"action":"insert","lines":["r"]}]}],[{"group":"doc","deltas":[{"start":{"row":82,"column":7},"end":{"row":82,"column":8},"action":"insert","lines":["o"]}]}],[{"group":"doc","deltas":[{"start":{"row":82,"column":8},"end":{"row":82,"column":9},"action":"insert","lines":["c"]}]}],[{"group":"doc","deltas":[{"start":{"row":82,"column":9},"end":{"row":82,"column":10},"action":"insert","lines":["e"]}]}],[{"group":"doc","deltas":[{"start":{"row":82,"column":10},"end":{"row":82,"column":11},"action":"insert","lines":["s"]}]}],[{"group":"doc","deltas":[{"start":{"row":82,"column":11},"end":{"row":82,"column":12},"action":"insert","lines":["s"]}]}]]},"ace":{"folds":[],"scrolltop":1071,"scrollleft":0,"selection":{"start":{"row":82,"column":12},"end":{"row":82,"column":12},"isBackwards":false},"options":{"tabSize":4,"useSoftTabs":false,"guessTabSize":false,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":65,"state":"start","mode":"ace/mode/python"}},"timestamp":1430233287000}