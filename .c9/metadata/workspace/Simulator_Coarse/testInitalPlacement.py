{"filter":false,"title":"testInitalPlacement.py","tooltip":"/Simulator_Coarse/testInitalPlacement.py","undoManager":{"mark":73,"position":73,"stack":[[{"group":"doc","deltas":[{"start":{"row":39,"column":64},"end":{"row":39,"column":65},"action":"remove","lines":["S"]},{"start":{"row":39,"column":64},"end":{"row":39,"column":65},"action":"insert","lines":["L"]}]}],[{"group":"doc","deltas":[{"start":{"row":39,"column":64},"end":{"row":39,"column":65},"action":"remove","lines":["L"]},{"start":{"row":39,"column":64},"end":{"row":39,"column":65},"action":"insert","lines":["L"]}]}],[{"group":"doc","deltas":[{"start":{"row":40,"column":52},"end":{"row":40,"column":53},"action":"remove","lines":["L"]}]}],[{"group":"doc","deltas":[{"start":{"row":40,"column":52},"end":{"row":40,"column":53},"action":"insert","lines":["M"]}]}],[{"group":"doc","deltas":[{"start":{"row":40,"column":52},"end":{"row":40,"column":53},"action":"remove","lines":["M"]},{"start":{"row":40,"column":52},"end":{"row":40,"column":53},"action":"insert","lines":["M"]}]}],[{"group":"doc","deltas":[{"start":{"row":38,"column":93},"end":{"row":38,"column":94},"action":"insert","lines":["5"]}]}],[{"group":"doc","deltas":[{"start":{"row":38,"column":94},"end":{"row":38,"column":95},"action":"insert","lines":[","]}]}],[{"group":"doc","deltas":[{"start":{"row":38,"column":93},"end":{"row":38,"column":94},"action":"remove","lines":["5"]}]}],[{"group":"doc","deltas":[{"start":{"row":38,"column":93},"end":{"row":38,"column":94},"action":"insert","lines":["2"]}]}],[{"group":"doc","deltas":[{"start":{"row":84,"column":19},"end":{"row":84,"column":27},"action":"remove","lines":["results/"]}]}],[{"group":"doc","deltas":[{"start":{"row":84,"column":19},"end":{"row":84,"column":20},"action":"insert","lines":["\\"]}]}],[{"group":"doc","deltas":[{"start":{"row":84,"column":19},"end":{"row":84,"column":20},"action":"insert","lines":["%"]}]}],[{"group":"doc","deltas":[{"start":{"row":84,"column":20},"end":{"row":84,"column":21},"action":"insert","lines":["s"]}]}],[{"group":"doc","deltas":[{"start":{"row":84,"column":21},"end":{"row":84,"column":22},"action":"remove","lines":["\\"]}]}],[{"group":"doc","deltas":[{"start":{"row":84,"column":21},"end":{"row":84,"column":22},"action":"insert","lines":["/"]}]}],[{"group":"doc","deltas":[{"start":{"row":84,"column":33},"end":{"row":84,"column":34},"action":"insert","lines":["&"]}]}],[{"group":"doc","deltas":[{"start":{"row":84,"column":33},"end":{"row":84,"column":34},"action":"remove","lines":["&"]}]}],[{"group":"doc","deltas":[{"start":{"row":84,"column":33},"end":{"row":84,"column":34},"action":"insert","lines":["%"]}]}],[{"group":"doc","deltas":[{"start":{"row":84,"column":34},"end":{"row":84,"column":61},"action":"insert","lines":["workloadName+'_continous_1'"]}]}],[{"group":"doc","deltas":[{"start":{"row":84,"column":34},"end":{"row":84,"column":35},"action":"insert","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":84,"column":35},"end":{"row":84,"column":36},"action":"insert","lines":["("]}]}],[{"group":"doc","deltas":[{"start":{"row":84,"column":63},"end":{"row":84,"column":64},"action":"insert","lines":[")"]}]}],[{"group":"doc","deltas":[{"start":{"row":84,"column":64},"end":{"row":84,"column":65},"action":"insert","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":84,"column":18},"end":{"row":84,"column":19},"action":"insert","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":84,"column":0},"end":{"row":84,"column":67},"action":"remove","lines":["\tscheduler.output( \"%s/placements\"% (workloadName+'_continous_1') )"]}]}],[{"group":"doc","deltas":[{"start":{"row":87,"column":0},"end":{"row":88,"column":0},"action":"insert","lines":["",""]}]}],[{"group":"doc","deltas":[{"start":{"row":87,"column":0},"end":{"row":87,"column":67},"action":"insert","lines":["\tscheduler.output( \"%s/placements\"% (workloadName+'_continous_1') )"]}]}],[{"group":"doc","deltas":[{"start":{"row":83,"column":1},"end":{"row":84,"column":0},"action":"remove","lines":["",""]}]}],[{"group":"doc","deltas":[{"start":{"row":83,"column":0},"end":{"row":83,"column":1},"action":"remove","lines":["\t"]}]}],[{"group":"doc","deltas":[{"start":{"row":82,"column":34},"end":{"row":83,"column":0},"action":"remove","lines":["",""]}]}],[{"group":"doc","deltas":[{"start":{"row":85,"column":20},"end":{"row":85,"column":65},"action":"remove","lines":["%s/placements\"% (workloadName+'_continous_1')"]}]}],[{"group":"doc","deltas":[{"start":{"row":85,"column":20},"end":{"row":85,"column":21},"action":"insert","lines":["¨"]}]}],[{"group":"doc","deltas":[{"start":{"row":85,"column":20},"end":{"row":85,"column":21},"action":"remove","lines":["¨"]}]}],[{"group":"doc","deltas":[{"start":{"row":85,"column":20},"end":{"row":85,"column":21},"action":"insert","lines":["\""]}]}],[{"group":"doc","deltas":[{"start":{"row":85,"column":20},"end":{"row":85,"column":21},"action":"insert","lines":["P"]}]}],[{"group":"doc","deltas":[{"start":{"row":85,"column":21},"end":{"row":85,"column":22},"action":"insert","lines":["L"]}]}],[{"group":"doc","deltas":[{"start":{"row":85,"column":22},"end":{"row":85,"column":23},"action":"insert","lines":["A"]}]}],[{"group":"doc","deltas":[{"start":{"row":85,"column":20},"end":{"row":85,"column":23},"action":"remove","lines":["PLA"]},{"start":{"row":85,"column":20},"end":{"row":85,"column":29},"action":"insert","lines":["PLACEMENT"]}]}],[{"group":"doc","deltas":[{"start":{"row":60,"column":48},"end":{"row":60,"column":59},"action":"remove","lines":["continous_1"]},{"start":{"row":60,"column":48},"end":{"row":60,"column":49},"action":"insert","lines":["s"]}]}],[{"group":"doc","deltas":[{"start":{"row":60,"column":49},"end":{"row":60,"column":50},"action":"insert","lines":["t"]}]}],[{"group":"doc","deltas":[{"start":{"row":60,"column":50},"end":{"row":60,"column":51},"action":"insert","lines":["a"]}]}],[{"group":"doc","deltas":[{"start":{"row":60,"column":51},"end":{"row":60,"column":52},"action":"insert","lines":["t"]}]}],[{"group":"doc","deltas":[{"start":{"row":60,"column":52},"end":{"row":60,"column":53},"action":"insert","lines":["i"]}]}],[{"group":"doc","deltas":[{"start":{"row":60,"column":53},"end":{"row":60,"column":54},"action":"insert","lines":["c"]}]}],[{"group":"doc","deltas":[{"start":{"row":75,"column":1},"end":{"row":75,"column":2},"action":"insert","lines":["#"]}]}],[{"group":"doc","deltas":[{"start":{"row":74,"column":1},"end":{"row":74,"column":2},"action":"insert","lines":["#"]}]}],[{"group":"doc","deltas":[{"start":{"row":74,"column":1},"end":{"row":74,"column":2},"action":"remove","lines":["#"]}]}],[{"group":"doc","deltas":[{"start":{"row":75,"column":1},"end":{"row":75,"column":2},"action":"remove","lines":["#"]}]}],[{"group":"doc","deltas":[{"start":{"row":60,"column":48},"end":{"row":60,"column":54},"action":"remove","lines":["static"]},{"start":{"row":60,"column":48},"end":{"row":60,"column":49},"action":"insert","lines":["c"]}]}],[{"group":"doc","deltas":[{"start":{"row":60,"column":49},"end":{"row":60,"column":50},"action":"insert","lines":["n"]}]}],[{"group":"doc","deltas":[{"start":{"row":60,"column":49},"end":{"row":60,"column":50},"action":"remove","lines":["n"]}]}],[{"group":"doc","deltas":[{"start":{"row":60,"column":49},"end":{"row":60,"column":50},"action":"insert","lines":["o"]}]}],[{"group":"doc","deltas":[{"start":{"row":60,"column":50},"end":{"row":60,"column":51},"action":"insert","lines":["n"]}]}],[{"group":"doc","deltas":[{"start":{"row":60,"column":51},"end":{"row":60,"column":52},"action":"insert","lines":["t"]}]}],[{"group":"doc","deltas":[{"start":{"row":60,"column":52},"end":{"row":60,"column":53},"action":"insert","lines":["i"]}]}],[{"group":"doc","deltas":[{"start":{"row":60,"column":53},"end":{"row":60,"column":54},"action":"insert","lines":["n"]}]}],[{"group":"doc","deltas":[{"start":{"row":60,"column":54},"end":{"row":60,"column":55},"action":"insert","lines":["o"]}]}],[{"group":"doc","deltas":[{"start":{"row":60,"column":55},"end":{"row":60,"column":56},"action":"insert","lines":["u"]}]}],[{"group":"doc","deltas":[{"start":{"row":60,"column":56},"end":{"row":60,"column":57},"action":"insert","lines":["s"]}]}],[{"group":"doc","deltas":[{"start":{"row":60,"column":57},"end":{"row":60,"column":58},"action":"insert","lines":["_"]}]}],[{"group":"doc","deltas":[{"start":{"row":60,"column":58},"end":{"row":60,"column":59},"action":"insert","lines":["!"]}]}],[{"group":"doc","deltas":[{"start":{"row":60,"column":58},"end":{"row":60,"column":59},"action":"remove","lines":["!"]}]}],[{"group":"doc","deltas":[{"start":{"row":60,"column":58},"end":{"row":60,"column":59},"action":"insert","lines":["1"]}]}],[{"group":"doc","deltas":[{"start":{"row":60,"column":58},"end":{"row":60,"column":59},"action":"remove","lines":["1"]},{"start":{"row":60,"column":58},"end":{"row":60,"column":59},"action":"insert","lines":["2"]}]}],[{"group":"doc","deltas":[{"start":{"row":75,"column":51},"end":{"row":75,"column":52},"action":"remove","lines":["1"]},{"start":{"row":75,"column":51},"end":{"row":75,"column":52},"action":"insert","lines":["2"]}]}],[{"group":"doc","deltas":[{"start":{"row":23,"column":17},"end":{"row":23,"column":44},"action":"remove","lines":["workfile_tripple_production"]},{"start":{"row":23,"column":17},"end":{"row":236,"column":3},"action":"insert","lines":["__author__ = 'amardeep'","","","__author__ = 'amardeep'","","'''","This file generates workload for each application running on a node","'''","","import numpy as np","import matplotlib.pyplot as plt","import random as rnd","from mpl_toolkits.mplot3d import Axes3D","import json","import matplotlib.animation as animation","","","lenNodes = 6","lenApps = 10","pAppsInit = np.sort(np.array([rnd.uniform(0.1,0.6) for x in np.arange(lenApps)]))[::-1]","# pAppsInit = np.array([rnd.uniform(0.1,0.6) for x in np.arange(15)])","","# print 'probability: ',pAppsInit","","","def fnGauss(mu,sigma,lenNodes = 15):","    '''","    distribute a number among nodes on uniform distribution","    :param mu:","    :param sigma:","    :param lenNodes:","    :return:","    '''","    nodes = []","    while len(nodes) < lenNodes:","        value = rnd.gauss(mu, sigma)","        if mu-sigma < value < mu+sigma:","            nodes.append(int(value))","    return nodes","","def fnConstructProb(idxApp, s, pApps):","    '''","    :param pApps: Input application probability","            s   : power (mist be between 0 and 1, 1 means same popularity, 0 means close to 1)","    :return: modified application probability","    '''","","    if isinstance(idxApp,int):","        pApps[idxApp] = pApps[idxApp]**s","    else:","        assert 'error! fnConstructProb'","    return pApps","","","def fnUsersPerApp(nUsers,pa,pApps):","    '''","    :param nUsers: number of users on that particular node","    :param nApps: total number of apps","    :param pa: list of apps on the node that will be popular","    :return arrUsers: list of users on that node","    '''","    # arrUsers = []","    pApps =  pApps.copy()","","    # case 1: Application m gets popular at one node","    for (idxApp,s) in pa:","        r_pApps = fnConstructProb(idxApp,s,pApps)","","    arrUsers = (nUsers*r_pApps).astype(int)","    #for nn in np.arange(nApps):","    #    rr = [rnd.random() for x in np.arange(nUsers)]","    #    arrUsers.append(len(np.where(r_pApps[nn]>rr)[0]))","    return arrUsers","","# create users on each node using gaussian distribution","def fnGenerateZ(pn,pa):","    '''","    generate demand node wise","    :param pn: node list where spike appear","    :param pa: for each node corresponding list of tuple of (app,spike coeff)","    :return:","    '''","    workload = np.zeros((lenNodes,lenApps))","    nodeList =  fnGauss(1000,100,lenNodes)","    for idx, val in enumerate(nodeList):","        if isinstance(pn,list):","            pApps = np.array([rnd.uniform(0.1,0.3) for x in np.arange(lenApps)])","            #pApps = pAppsInit.copy()","","            if idx in pn:","                arrUsers = fnUsersPerApp(val,pa[pn.index(idx)],pApps)","                workload[idx,:] = np.array(arrUsers)","            else:","                arrUsers = (val*pApps).astype(int)","                workload[idx,:] = arrUsers","        else:","            arrUsers = (val*pAppsInit).astype(int)","            workload[idx,:] = arrUsers","    return workload","","#def fnGenerateTimeVariation(t):","# Normal","workload_s = fnGenerateZ(1,1)","print \"progress\"","workload_s = fnGenerateZ([4,14],[[(2,0.5),(5,0.3)],[(5,0.5)]])","# one application gets popular on one node","workload_e = fnGenerateZ(2,1)","","#nodeL = [2,3,4, 12,13,14]","#appL_pk = [[(10,0.2)],[(10,0.1)],[(10,0.3)],[(25,0.3)],[(10,0.1)],[(10,0.2)]]","#appL_afp = [[(10,0.5)],[(10,0.6)],[(10,0.7)],[(25,0.8)],[(10,0.4)],[(10,0.5)]]","#workload_e = fnGenerateZ([2,3,4, 12,13,14],[[(10,0.2)],[(10,0.1)],[(10,0.5)],[(10,0.3)],[(10,0.1)],[(10,0.1)]])","#workload_pk = fnGenerateZ( nodeL , appL_pk)","#workload_afp = fnGenerateZ( nodeL , appL_afp)","","alpha = 0.05","t = 25","","step = (workload_e-workload_s)/(t-1)","temp = workload_s.copy()","","t_workload = np.zeros((t,lenNodes,lenApps))","","for i in range(t):","    # t_workload[t_big+i,:,:] = temp","    t_workload[i,:,:] = np.multiply((1-alpha+2*alpha*np.random.random((lenNodes,lenApps))),temp)","    temp = temp + step","","","def fnRand(arrLen,workload):","    temp_workload = np.zeros((arrLen,lenNodes,lenApps))","    for i in np.arange(arrLen):","        temp_workload[i,:,:] = np.multiply((1-alpha+2*alpha*np.random.random((lenNodes,lenApps))),workload)","    return temp_workload","","","","# write in a Json File, time, Application, node, demand","# print t_workload","workload_dict = {}","# appList = ['A'+str(i) for i in np.arange(lenApps)]","nodeList = np.arange(lenNodes).tolist()","for i in np.arange(t):","    temp = {}","    for j in np.arange(lenApps):","        temp1 = {}","        for k in np.arange(lenNodes):","            temp1[k] = {'PRODUCTION':t_workload[i,k,j]}","        #temp['A'+str(j)] = dict(zip (nodeList,dict(zip(lenNodes*['PRODUCTION'],t_workload[i,:,j]))))","        temp['A'+str(j)] = temp1","    workload_dict[i] = temp","","# Convert pyhton dictionary to JSON file","data_json = json.dumps(workload_dict, sort_keys=True, indent=2)","","file_name = 'workload_v1_'+str(lenNodes)+'_a'+str(lenApps)+'_case'+str(5)+'.json'","# Wite JSON stucture to file","f = open(file_name, 'w')","f.write(data_json)","","# Set up formatting for the movie files","# Writer = animation.writers['ffmpeg']","# writer = Writer(fps=15, metadata=dict(artist='Me'), bitrate=1800)","","# fig = plt.figure()","fig = plt.figure()","ax1 = fig.add_subplot(1, 1, 1, projection='3d')","ax1.set_xlabel('Apps')","ax1.set_ylabel('nodes')","ax1.set_zlabel('demand')","x = np.arange(lenApps)","y = np.arange(lenNodes)","ax1.set_zlim3d(0, 1200)","ax1.set_title('Before being popular, t = 0')","X,Y = np.meshgrid(x, y)","#print workload_s","#print X.shape,Y.shape,workload_s.shape","obj1 = ax1.plot_surface(X,Y,workload_s, rstride=1, cstride=1, cmap='hot')","#wframe = ax1.plot_wireframe(X, Y, workload_s, rstride=2, cstride=2)","","","def update(i, ax, fig):","    ax.cla()","    # Z = np.multiply((1-alpha+2*alpha*np.random.random((lenNodes,lenApps))),t_workload[i])","    obj1 = ax.plot_surface(X,Y,t_workload[i], rstride=1, cstride=1, cmap='hot')","    #wframe = ax.plot_wireframe(X, Y, Z, rstride=2, cstride=2)","    ax.set_zlim(0,1200)","    #return wframe,","    return obj1,","","ani = animation.FuncAnimation(fig, update,frames=xrange(t),fargs=(ax1, fig ), interval=50)","plt.show()","","#ani.save('im.mp4', writer=writer)","# Creating the Animation object","#anim = animation.FuncAnimation(fig, update, init_func=init, frames = 25,interval=100, blit=False)","'''","","ax2 = fig.add_subplot(1, 2, 2, projection='3d')","ax2.set_xlabel('Apps')","ax2.set_ylabel('nodes')","ax2.set_zlabel('demand')","ax2.set_zlim3d(0, 1200)","ax2.set_title('App 10 popular on nodes 2,3,4 and 12,13,14 after t= 25')","x = np.arange(lenApps)","y = np.arange(lenNodes)","","X,Y = np.meshgrid(x, y)","#print workload_s","#print X.shape,Y.shape,workload_s.shape","ax2.plot_surface(X, Y, workload_pk, rstride=1, cstride=1, cmap='hot')","","plt.show()","'''"]}]}],[{"group":"doc","deltas":[{"start":{"row":23,"column":17},"end":{"row":236,"column":3},"action":"remove","lines":["__author__ = 'amardeep'","","","__author__ = 'amardeep'","","'''","This file generates workload for each application running on a node","'''","","import numpy as np","import matplotlib.pyplot as plt","import random as rnd","from mpl_toolkits.mplot3d import Axes3D","import json","import matplotlib.animation as animation","","","lenNodes = 6","lenApps = 10","pAppsInit = np.sort(np.array([rnd.uniform(0.1,0.6) for x in np.arange(lenApps)]))[::-1]","# pAppsInit = np.array([rnd.uniform(0.1,0.6) for x in np.arange(15)])","","# print 'probability: ',pAppsInit","","","def fnGauss(mu,sigma,lenNodes = 15):","    '''","    distribute a number among nodes on uniform distribution","    :param mu:","    :param sigma:","    :param lenNodes:","    :return:","    '''","    nodes = []","    while len(nodes) < lenNodes:","        value = rnd.gauss(mu, sigma)","        if mu-sigma < value < mu+sigma:","            nodes.append(int(value))","    return nodes","","def fnConstructProb(idxApp, s, pApps):","    '''","    :param pApps: Input application probability","            s   : power (mist be between 0 and 1, 1 means same popularity, 0 means close to 1)","    :return: modified application probability","    '''","","    if isinstance(idxApp,int):","        pApps[idxApp] = pApps[idxApp]**s","    else:","        assert 'error! fnConstructProb'","    return pApps","","","def fnUsersPerApp(nUsers,pa,pApps):","    '''","    :param nUsers: number of users on that particular node","    :param nApps: total number of apps","    :param pa: list of apps on the node that will be popular","    :return arrUsers: list of users on that node","    '''","    # arrUsers = []","    pApps =  pApps.copy()","","    # case 1: Application m gets popular at one node","    for (idxApp,s) in pa:","        r_pApps = fnConstructProb(idxApp,s,pApps)","","    arrUsers = (nUsers*r_pApps).astype(int)","    #for nn in np.arange(nApps):","    #    rr = [rnd.random() for x in np.arange(nUsers)]","    #    arrUsers.append(len(np.where(r_pApps[nn]>rr)[0]))","    return arrUsers","","# create users on each node using gaussian distribution","def fnGenerateZ(pn,pa):","    '''","    generate demand node wise","    :param pn: node list where spike appear","    :param pa: for each node corresponding list of tuple of (app,spike coeff)","    :return:","    '''","    workload = np.zeros((lenNodes,lenApps))","    nodeList =  fnGauss(1000,100,lenNodes)","    for idx, val in enumerate(nodeList):","        if isinstance(pn,list):","            pApps = np.array([rnd.uniform(0.1,0.3) for x in np.arange(lenApps)])","            #pApps = pAppsInit.copy()","","            if idx in pn:","                arrUsers = fnUsersPerApp(val,pa[pn.index(idx)],pApps)","                workload[idx,:] = np.array(arrUsers)","            else:","                arrUsers = (val*pApps).astype(int)","                workload[idx,:] = arrUsers","        else:","            arrUsers = (val*pAppsInit).astype(int)","            workload[idx,:] = arrUsers","    return workload","","#def fnGenerateTimeVariation(t):","# Normal","workload_s = fnGenerateZ(1,1)","print \"progress\"","workload_s = fnGenerateZ([4,14],[[(2,0.5),(5,0.3)],[(5,0.5)]])","# one application gets popular on one node","workload_e = fnGenerateZ(2,1)","","#nodeL = [2,3,4, 12,13,14]","#appL_pk = [[(10,0.2)],[(10,0.1)],[(10,0.3)],[(25,0.3)],[(10,0.1)],[(10,0.2)]]","#appL_afp = [[(10,0.5)],[(10,0.6)],[(10,0.7)],[(25,0.8)],[(10,0.4)],[(10,0.5)]]","#workload_e = fnGenerateZ([2,3,4, 12,13,14],[[(10,0.2)],[(10,0.1)],[(10,0.5)],[(10,0.3)],[(10,0.1)],[(10,0.1)]])","#workload_pk = fnGenerateZ( nodeL , appL_pk)","#workload_afp = fnGenerateZ( nodeL , appL_afp)","","alpha = 0.05","t = 25","","step = (workload_e-workload_s)/(t-1)","temp = workload_s.copy()","","t_workload = np.zeros((t,lenNodes,lenApps))","","for i in range(t):","    # t_workload[t_big+i,:,:] = temp","    t_workload[i,:,:] = np.multiply((1-alpha+2*alpha*np.random.random((lenNodes,lenApps))),temp)","    temp = temp + step","","","def fnRand(arrLen,workload):","    temp_workload = np.zeros((arrLen,lenNodes,lenApps))","    for i in np.arange(arrLen):","        temp_workload[i,:,:] = np.multiply((1-alpha+2*alpha*np.random.random((lenNodes,lenApps))),workload)","    return temp_workload","","","","# write in a Json File, time, Application, node, demand","# print t_workload","workload_dict = {}","# appList = ['A'+str(i) for i in np.arange(lenApps)]","nodeList = np.arange(lenNodes).tolist()","for i in np.arange(t):","    temp = {}","    for j in np.arange(lenApps):","        temp1 = {}","        for k in np.arange(lenNodes):","            temp1[k] = {'PRODUCTION':t_workload[i,k,j]}","        #temp['A'+str(j)] = dict(zip (nodeList,dict(zip(lenNodes*['PRODUCTION'],t_workload[i,:,j]))))","        temp['A'+str(j)] = temp1","    workload_dict[i] = temp","","# Convert pyhton dictionary to JSON file","data_json = json.dumps(workload_dict, sort_keys=True, indent=2)","","file_name = 'workload_v1_'+str(lenNodes)+'_a'+str(lenApps)+'_case'+str(5)+'.json'","# Wite JSON stucture to file","f = open(file_name, 'w')","f.write(data_json)","","# Set up formatting for the movie files","# Writer = animation.writers['ffmpeg']","# writer = Writer(fps=15, metadata=dict(artist='Me'), bitrate=1800)","","# fig = plt.figure()","fig = plt.figure()","ax1 = fig.add_subplot(1, 1, 1, projection='3d')","ax1.set_xlabel('Apps')","ax1.set_ylabel('nodes')","ax1.set_zlabel('demand')","x = np.arange(lenApps)","y = np.arange(lenNodes)","ax1.set_zlim3d(0, 1200)","ax1.set_title('Before being popular, t = 0')","X,Y = np.meshgrid(x, y)","#print workload_s","#print X.shape,Y.shape,workload_s.shape","obj1 = ax1.plot_surface(X,Y,workload_s, rstride=1, cstride=1, cmap='hot')","#wframe = ax1.plot_wireframe(X, Y, workload_s, rstride=2, cstride=2)","","","def update(i, ax, fig):","    ax.cla()","    # Z = np.multiply((1-alpha+2*alpha*np.random.random((lenNodes,lenApps))),t_workload[i])","    obj1 = ax.plot_surface(X,Y,t_workload[i], rstride=1, cstride=1, cmap='hot')","    #wframe = ax.plot_wireframe(X, Y, Z, rstride=2, cstride=2)","    ax.set_zlim(0,1200)","    #return wframe,","    return obj1,","","ani = animation.FuncAnimation(fig, update,frames=xrange(t),fargs=(ax1, fig ), interval=50)","plt.show()","","#ani.save('im.mp4', writer=writer)","# Creating the Animation object","#anim = animation.FuncAnimation(fig, update, init_func=init, frames = 25,interval=100, blit=False)","'''","","ax2 = fig.add_subplot(1, 2, 2, projection='3d')","ax2.set_xlabel('Apps')","ax2.set_ylabel('nodes')","ax2.set_zlabel('demand')","ax2.set_zlim3d(0, 1200)","ax2.set_title('App 10 popular on nodes 2,3,4 and 12,13,14 after t= 25')","x = np.arange(lenApps)","y = np.arange(lenNodes)","","X,Y = np.meshgrid(x, y)","#print workload_s","#print X.shape,Y.shape,workload_s.shape","ax2.plot_surface(X, Y, workload_pk, rstride=1, cstride=1, cmap='hot')","","plt.show()","'''"]},{"start":{"row":23,"column":17},"end":{"row":23,"column":44},"action":"insert","lines":["workfile_tripple_production"]}]}],[{"group":"doc","deltas":[{"start":{"row":23,"column":17},"end":{"row":23,"column":44},"action":"remove","lines":["workfile_tripple_production"]}]}],[{"group":"doc","deltas":[{"start":{"row":23,"column":17},"end":{"row":23,"column":41},"action":"insert","lines":["workload_v1_6_a10_case5."]}]}],[{"group":"doc","deltas":[{"start":{"row":23,"column":41},"end":{"row":23,"column":45},"action":"insert","lines":["json"]}]}],[{"group":"doc","deltas":[{"start":{"row":85,"column":1},"end":{"row":85,"column":2},"action":"insert","lines":["%"]}]}],[{"group":"doc","deltas":[{"start":{"row":85,"column":1},"end":{"row":85,"column":2},"action":"remove","lines":["%"]}]}],[{"group":"doc","deltas":[{"start":{"row":85,"column":1},"end":{"row":85,"column":2},"action":"insert","lines":["#"]}]}],[{"group":"doc","deltas":[{"start":{"row":23,"column":40},"end":{"row":23,"column":45},"action":"remove","lines":[".json"]}]}]]},"ace":{"folds":[],"scrolltop":660,"scrollleft":0,"selection":{"start":{"row":85,"column":2},"end":{"row":85,"column":2},"isBackwards":false},"options":{"tabSize":4,"useSoftTabs":false,"guessTabSize":false,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":108,"mode":"ace/mode/python"}},"timestamp":1430401004492,"hash":"285f1278d3ebb7b1d3c21cb22a4a127c30d886cc"}