{"changed":true,"filter":false,"title":"Scheduler.py","tooltip":"/Simulator_Coarse/Scheduler.py","value":"import simpy\nimport os\nimport copy_reg\nimport logging\n\nfrom Datacentre import Datacentre\nfrom multiprocessing import Process, Queue\nfrom Link import Link\n\nclass Scheduler(object):\n\t\"\"\"\n\tDeclare global dictionary that will keep track of all the apps and the nodes \n\ton which they are running. Later we plan to assign ID to each application. \n\t\"\"\"\n\tappNodeDictGlobal = {}\n\t\t\n\tdef __init__(self, env, topology):\n\t\tself.env = env\n\t\tself.topology = topology\n\t\tself.placements = []\n\t\tself.measuredSystemOverload = float('inf')\n\t\tself.placementRegistry = []\n\t\tself.evaluationRegistry = []\n\t\t\n\tdef recordPlacement(self, appName, dcName, time):\n\t\tself.placementRegistry.append( (time, appName, dcName) )\n\t\t\n\tdef recordEvaluation(self, time, nodes):\n\t\tself.evaluationRegistry.append( (time, nodes) )\n\t\t\n\t'''\n\t######## Evaluation ########\n\t'''\n\t# Evalute if path can accomodate the placement option\n\tdef evaluateAppPlacementCost(self, appPlacement):\n\t\tentities = self.evaluateAppPlacementResourcesUsage(appPlacement)\n\t\t\n\t\toverloadFactor = 0\n\n\t\tassert isinstance(entities, dict), \"%s : entities is not a dict - %s\" %(self.getName(), entities)\n\n\t\tfor entity in entities.itervalues():\n\t\t\tentitiyOverload = entity['ENTITY'].evaluateAggregateCost(entity['USAGE'])\n\t\t\t\n\t\t\tif entitiyOverload == float('inf'):\n\t\t\t\toverloadFactor = entitiyOverload\n\t\t\t\tlogging.info(\"%s is overloaded\" % entity['ENTITY'].getName())\n\t\t\t\tbreak\n\t\t\t\n\t\t\toverloadFactor += entitiyOverload\n\t\t\n\t\treturn overloadFactorouh\n\t\n\t# Evalute if path can accomodate the placement option (threaded)\n\tdef evaluateAppPlacementCost_threaded(self, index, appsNotScheduled, constellation, queue):\n\t\tappPlacement = appPlacement = self.getPackagedPath(appsNotScheduled, constellation)\n\t\tentities = self.evaluateAppPlacementResourcesUsage(appPlacement)\n\t\t\n\t\toverloadFactor = 0\n\n\t\tassert isinstance(entities, dict), \"%s : entities is not a dict - %s\" %(self.getName(), entities)\n\n\t\tfor entity in entities.itervalues():\n\t\t\t#logging.info(\"\\t\\t %s - Usage %f\" % ( entity['ENTITY'].getName(), entity['USAGE']) )\n\t\t\t\n\t\t\tentitiyOverload = entity['ENTITY'].evaluateAggregateCost(entity['USAGE'])\n\t\t\t\n\t\t\tif entitiyOverload == float('inf'):\n\t\t\t\toverloadFactor = entitiyOverload\n\t\t\t\tlogging.info(\"%s is overloaded\" % entity.getName())\n\t\t\t\tbreak\n\t\t\toverloadFactor += entitiyOverload\n\t\t\n\t\tprint \"\\t %f\" % overloadFactor\n\t\t\n\t\tqueue.put((index, overloadFactor))\t\n\t\n\t# Compute total local resource usage for app in appNames and paths \n\tdef evaluateAppPlacementResourcesUsage(self, appPlacement): # appPaths ([PATH], appName, demand)\n\t\tenteties = {}\n\t\tfor (path, appName, demand) in appPlacement:\n\t\t\tfor entity in path:\n\t\t\t\tif entity.getName() not in enteties:\n\t\t\t\t\tenteties[entity.getName()] = {'USAGE':entity.evaluateResourcesUsageExcluding(appName), 'ENTITY':entity}\n\t\t\t\t\n\t\t\t\tusage = entity.evaluateAdditionalResourcesUsage({appName:demand})\n\t\t\t\tfor resourceName, resourceUsage in usage.iteritems():\n\t\t\t\t\tenteties[entity.getName()]['USAGE'][resourceName] += resourceUsage\n\t\t\t\t\t\t\n\t\treturn enteties\n\t\n\t# Evalute if path can accomodate the placement option\n\tdef evaluatePath(self, appPlacement):\n\t\tentities = self.evaluateAppPlacementResourcesUsage(appPlacement)\n\t\t\n\t\tfor entity in entities:\n\t\t\tentity['FITS'] = entity['ENTITY'].willAppFit({appName: entity['USAGE']})\n\t\n\tdef getoverloadNodes(self,dictAppNode):\n\t\t\"\"\"\n\t\tDescr : compute the overload of the nodes where the application is \n\t\t\t\trunning \n\t\tInput:  A dictionary with key as application and value as node on which\n\t\t\t\tthe application is running\n\t\tOutput: Dictionary, key: app, value: overload for the corresponding nodes\n\t\t\t\twhere the app is running \n\t\t\"\"\"\n\t\toverloadNodes = {}\n\t\tfor app,node in dictAppNode:\n\t\t\toverloadNodes[node.getName()]=node.getOverload()\n\t\treturn overloadNodes\n\t\n\tdef overloadListNodes(self,lstNode):\n\t\t\"\"\"\n\t\tDescr : computes overload for a list of nodes  \n\t\tInput : List of Nodes whose overload we need to compute \n\t\tOutput: List containing overload for corresponding nodes\n\t\t\"\"\"\n\t\tlstoverloadNodes = []\n\t\tfor node in lstNode:\n\t\t\tlstoverloadNodes.append(node.getOverload())\n\t\treturn lstoverloadNodes\n\t\n\tdef evaluateNeighbour(self,appToBeEvaluated):\n\t\t\"\"\"\n\t\tDescr  : This function evaluates the all the nodes where application \n\t\t\t\t violates the node constraints \n\t\tInput  : dictionary of app, node \n\t\tOutput : dictionary of possible neighbour nodes for placement for \n\t\t\t\t corresponding application   \n\t\t\"\"\"\n\t\tres = {}\n\t\tfor app,node in appToBeEvaluated:\n\t\t\tlistNodes = node.findNeighbourLocal(node)\n\t\t\toverloadLocalNodes = {}\n\t\t\tfor n in listNodes: \n\t\t\t\tn.resource = n.resource + app.resource\n\t\t\t\toverloadLocalNodes[n] = n.getOverload()\n\t\t\tminNode = min(overloadLocalNodes,key = overloadLocalNodes.get) \n\t\t\t# Node dictionary for placement \n\t\t\tres[app] = minNode\n\t\treturn res \n\t\t\n\t# Schedule an application\n\tdef schedule(self, dictAppNode,thldApp):\n\t\t\"\"\"\n\t\tDescr  : finds the node among the list of the nodes where the \n\t\t\t\t application is migrated based on certain threshold    \n\t\tInput  : dictAppNode: dictionary of (app,Node) to be placed, thldApp\n\t\tOutput : node where the cost of running the app is minimum \n\t\t\"\"\"\n\t\t# compute the overload of the node where the apps are running \n\t\tdictAppNodeOverload = {}\n\t\tappToBeEvaluated = {}\n\t\tfor app,node in dictAppNode:\n\t\t\tdictAppNodeOverload[app] = node.getOverload()\n\t\t\tif dictAppNodeoverload[app] > thldApp[app]:\n\t\t\t\tappToBeEvaluated[app] = node\n\t\t\telse: \n\t\t\t\t# add the app to the node as constraint is fulfilled \n\t\t\t\tnode.resource = node.resource + app.resource\n\t\tpossiblePlacementDict = self.evaluateNeighbour(appToBeEvaluated)\n\t\treturn possiblePlacementDict\n\n\tdef output(self, outputFolder):\n\t\toutputs = [self.writePlacementToFile, self.writeEvaluationsToFile]\n\t\t\n\t\tpath = \"results\"\n\t\t\n\t\tif not os.path.exists(path):\n\t\t\tos.mkdir(path)\n\t\t\n\t\tpath += \"/%s\" % outputFolder\n\t\t\n\t\tif not os.path.exists(path):\n\t\t\tos.mkdir(path)\n\t\t\n\t\tfor output in outputs:\n\t\t\toutput(path)\n\t\n\tdef writePlacementToFile(self, filePath):\n\t\tfile = open('%s/%s%s'%(filePath,'PLACEMENTS','.csv'),'w')\n\t\tfile.write(\"%s%s%s%s%s\\r\" % ('Time', ',', 'App', ',', 'DC') )\n\t\t\n\t\tfor (time, appName, dcName) in self.placementRegistry:\n\t\t\tfile.write(\"%i%s%s%s%s\\r\" % (time, ',', appName, ',', dcName) )\n\t\t\n\t\tfile.close()\n\n\tdef writeEvaluationsToFile(self, filePath):\n\t\tfile = open('%s/%s%s'%(filePath,'EVALUATIONS','.csv'),'w')\n\t\tfile.write(\"%s%s%s\\r\" % ('Time', ',', 'Nbr nodes') )\n\t\t\n\t\tfor (time, nodes) in self.evaluationRegistry:\n\t\t\tfile.write(\"%i%s%s\\r\" % (time, ',', nodes) )\n\t\t\n\t\tfile.close()\n","undoManager":{"mark":94,"position":100,"stack":[[{"group":"doc","deltas":[{"start":{"row":200,"column":22},"end":{"row":200,"column":23},"action":"insert","lines":["n"]}]}],[{"group":"doc","deltas":[{"start":{"row":200,"column":23},"end":{"row":200,"column":24},"action":"insert","lines":["_"]}]}],[{"group":"doc","deltas":[{"start":{"row":200,"column":24},"end":{"row":200,"column":25},"action":"insert","lines":["t"]}]}],[{"group":"doc","deltas":[{"start":{"row":200,"column":25},"end":{"row":200,"column":26},"action":"insert","lines":["m"]}]}],[{"group":"doc","deltas":[{"start":{"row":200,"column":25},"end":{"row":200,"column":26},"action":"remove","lines":["m"]}]}],[{"group":"doc","deltas":[{"start":{"row":200,"column":25},"end":{"row":200,"column":26},"action":"insert","lines":["i"]}]}],[{"group":"doc","deltas":[{"start":{"row":200,"column":26},"end":{"row":200,"column":27},"action":"insert","lines":["m"]}]}],[{"group":"doc","deltas":[{"start":{"row":200,"column":27},"end":{"row":200,"column":28},"action":"insert","lines":["e"]}]}],[{"group":"doc","deltas":[{"start":{"row":201,"column":39},"end":{"row":201,"column":44},"action":"remove","lines":["nodes"]},{"start":{"row":201,"column":39},"end":{"row":201,"column":54},"action":"insert","lines":["evaluation_time"]}]}],[{"group":"doc","deltas":[{"start":{"row":198,"column":19},"end":{"row":198,"column":20},"action":"remove","lines":["s"]},{"start":{"row":198,"column":19},"end":{"row":198,"column":20},"action":"insert","lines":["i"]}]}],[{"group":"doc","deltas":[{"start":{"row":201,"column":20},"end":{"row":201,"column":21},"action":"remove","lines":["s"]},{"start":{"row":201,"column":20},"end":{"row":201,"column":21},"action":"insert","lines":["i"]}]}],[{"group":"doc","deltas":[{"start":{"row":163,"column":67},"end":{"row":163,"column":68},"action":"insert","lines":[","]}]}],[{"group":"doc","deltas":[{"start":{"row":163,"column":68},"end":{"row":163,"column":69},"action":"insert","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":163,"column":69},"end":{"row":163,"column":95},"action":"insert","lines":["writeEvaluationsTimeToFile"]}]}],[{"group":"doc","deltas":[{"start":{"row":23,"column":0},"end":{"row":23,"column":34},"action":"remove","lines":["\t\tself.evaluationTimeRegistry = []"]}]}],[{"group":"doc","deltas":[{"start":{"row":22,"column":30},"end":{"row":23,"column":0},"action":"remove","lines":["",""]}]}],[{"group":"doc","deltas":[{"start":{"row":30,"column":0},"end":{"row":32,"column":1},"action":"remove","lines":["\tdef recordEvaluationTime(self, time, evaluationTime):","\t\tself.evaluationTimeRegistry.append( (time, evaluationTime) )","\t"]}]}],[{"group":"doc","deltas":[{"start":{"row":29,"column":2},"end":{"row":30,"column":0},"action":"remove","lines":["",""]}]}],[{"group":"doc","deltas":[{"start":{"row":191,"column":0},"end":{"row":199,"column":14},"action":"remove","lines":["\t\t","\tdef writeEvaluationsTimeToFile(self, filePath):","\t\tfile = open('%s/%s%s'%(filePath,'EVALUATION_TIMES','.csv'),'w')","\t\tfile.write(\"%s%s%i\\r\" % ('Time', ',', 'Evaluation time') )","\t\t","\t\tfor (time, evaluation_time) in self.evaluationTimeRegistry:","\t\t\tfile.write(\"%i%s%i\\r\" % (time, ',', evaluation_time) )","\t\t","\t\tfile.close()"]}]}],[{"group":"doc","deltas":[{"start":{"row":190,"column":14},"end":{"row":191,"column":0},"action":"remove","lines":["",""]}]}],[{"group":"doc","deltas":[{"start":{"row":159,"column":67},"end":{"row":159,"column":95},"action":"remove","lines":[", writeEvaluationsTimeToFile"]}]}],[{"group":"doc","deltas":[{"start":{"row":58,"column":17},"end":{"row":58,"column":18},"action":"insert","lines":["\\"]}]}],[{"group":"doc","deltas":[{"start":{"row":58,"column":18},"end":{"row":58,"column":19},"action":"insert","lines":["t"]}]}],[{"group":"doc","deltas":[{"start":{"row":58,"column":19},"end":{"row":58,"column":20},"action":"insert","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":58,"column":19},"end":{"row":58,"column":20},"action":"insert","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":58,"column":20},"end":{"row":58,"column":21},"action":"insert","lines":["\\"]}]}],[{"group":"doc","deltas":[{"start":{"row":58,"column":21},"end":{"row":58,"column":22},"action":"insert","lines":["t"]}]}],[{"group":"doc","deltas":[{"start":{"row":58,"column":19},"end":{"row":58,"column":20},"action":"remove","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":58,"column":3},"end":{"row":58,"column":4},"action":"insert","lines":["#"]}]}],[{"group":"doc","deltas":[{"start":{"row":63,"column":36},"end":{"row":64,"column":0},"action":"insert","lines":["",""]},{"start":{"row":64,"column":0},"end":{"row":64,"column":4},"action":"insert","lines":["\t\t\t\t"]}]}],[{"group":"doc","deltas":[{"start":{"row":64,"column":4},"end":{"row":64,"column":5},"action":"insert","lines":["l"]}]}],[{"group":"doc","deltas":[{"start":{"row":64,"column":5},"end":{"row":64,"column":6},"action":"insert","lines":["o"]}]}],[{"group":"doc","deltas":[{"start":{"row":64,"column":6},"end":{"row":64,"column":7},"action":"insert","lines":["g"]}]}],[{"group":"doc","deltas":[{"start":{"row":64,"column":7},"end":{"row":64,"column":8},"action":"insert","lines":["g"]}]}],[{"group":"doc","deltas":[{"start":{"row":64,"column":8},"end":{"row":64,"column":9},"action":"insert","lines":["i"]}]}],[{"group":"doc","deltas":[{"start":{"row":64,"column":9},"end":{"row":64,"column":10},"action":"insert","lines":["n"]}]}],[{"group":"doc","deltas":[{"start":{"row":64,"column":10},"end":{"row":64,"column":11},"action":"insert","lines":["g"]}]}],[{"group":"doc","deltas":[{"start":{"row":64,"column":11},"end":{"row":64,"column":12},"action":"insert","lines":["."]}]}],[{"group":"doc","deltas":[{"start":{"row":64,"column":12},"end":{"row":64,"column":13},"action":"insert","lines":["i"]}]}],[{"group":"doc","deltas":[{"start":{"row":64,"column":13},"end":{"row":64,"column":14},"action":"insert","lines":["n"]}]}],[{"group":"doc","deltas":[{"start":{"row":64,"column":14},"end":{"row":64,"column":15},"action":"insert","lines":["f"]}]}],[{"group":"doc","deltas":[{"start":{"row":64,"column":15},"end":{"row":64,"column":16},"action":"insert","lines":["o"]}]}],[{"group":"doc","deltas":[{"start":{"row":64,"column":16},"end":{"row":64,"column":17},"action":"insert","lines":["("]}]}],[{"group":"doc","deltas":[{"start":{"row":64,"column":17},"end":{"row":64,"column":18},"action":"insert","lines":[")"]}]}],[{"group":"doc","deltas":[{"start":{"row":64,"column":17},"end":{"row":64,"column":18},"action":"insert","lines":["\""]}]}],[{"group":"doc","deltas":[{"start":{"row":64,"column":18},"end":{"row":64,"column":19},"action":"insert","lines":["\""]}]}],[{"group":"doc","deltas":[{"start":{"row":64,"column":19},"end":{"row":64,"column":20},"action":"remove","lines":[")"]},{"start":{"row":64,"column":19},"end":{"row":64,"column":20},"action":"insert","lines":["%"]}]}],[{"group":"doc","deltas":[{"start":{"row":64,"column":20},"end":{"row":64,"column":21},"action":"insert","lines":[")"]}]}],[{"group":"doc","deltas":[{"start":{"row":64,"column":20},"end":{"row":64,"column":21},"action":"insert","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":64,"column":21},"end":{"row":64,"column":27},"action":"insert","lines":["entity"]}]}],[{"group":"doc","deltas":[{"start":{"row":64,"column":19},"end":{"row":64,"column":20},"action":"insert","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":64,"column":18},"end":{"row":64,"column":19},"action":"insert","lines":["%"]}]}],[{"group":"doc","deltas":[{"start":{"row":64,"column":19},"end":{"row":64,"column":20},"action":"insert","lines":["s"]}]}],[{"group":"doc","deltas":[{"start":{"row":64,"column":20},"end":{"row":64,"column":21},"action":"insert","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":64,"column":21},"end":{"row":64,"column":22},"action":"insert","lines":["i"]}]}],[{"group":"doc","deltas":[{"start":{"row":64,"column":22},"end":{"row":64,"column":23},"action":"insert","lines":["s"]}]}],[{"group":"doc","deltas":[{"start":{"row":64,"column":23},"end":{"row":64,"column":24},"action":"insert","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":64,"column":24},"end":{"row":64,"column":25},"action":"insert","lines":["o"]}]}],[{"group":"doc","deltas":[{"start":{"row":64,"column":25},"end":{"row":64,"column":26},"action":"insert","lines":["v"]}]}],[{"group":"doc","deltas":[{"start":{"row":64,"column":26},"end":{"row":64,"column":27},"action":"insert","lines":["e"]}]}],[{"group":"doc","deltas":[{"start":{"row":64,"column":27},"end":{"row":64,"column":28},"action":"insert","lines":["r"]}]}],[{"group":"doc","deltas":[{"start":{"row":64,"column":28},"end":{"row":64,"column":29},"action":"insert","lines":["l"]}]}],[{"group":"doc","deltas":[{"start":{"row":64,"column":29},"end":{"row":64,"column":30},"action":"insert","lines":["o"]}]}],[{"group":"doc","deltas":[{"start":{"row":64,"column":30},"end":{"row":64,"column":31},"action":"insert","lines":["a"]}]}],[{"group":"doc","deltas":[{"start":{"row":64,"column":31},"end":{"row":64,"column":32},"action":"insert","lines":["d"]}]}],[{"group":"doc","deltas":[{"start":{"row":64,"column":32},"end":{"row":64,"column":33},"action":"insert","lines":["e"]}]}],[{"group":"doc","deltas":[{"start":{"row":64,"column":33},"end":{"row":64,"column":34},"action":"insert","lines":["d"]}]}],[{"group":"doc","deltas":[{"start":{"row":64,"column":34},"end":{"row":64,"column":35},"action":"insert","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":64,"column":34},"end":{"row":64,"column":35},"action":"remove","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":64,"column":34},"end":{"row":64,"column":35},"action":"insert","lines":["´"]}]}],[{"group":"doc","deltas":[{"start":{"row":64,"column":34},"end":{"row":64,"column":35},"action":"remove","lines":["´"]}]}],[{"group":"doc","deltas":[{"start":{"row":64,"column":44},"end":{"row":64,"column":45},"action":"insert","lines":["."]}]}],[{"group":"doc","deltas":[{"start":{"row":64,"column":45},"end":{"row":64,"column":46},"action":"insert","lines":["g"]}]}],[{"group":"doc","deltas":[{"start":{"row":64,"column":46},"end":{"row":64,"column":47},"action":"insert","lines":["t"]}]}],[{"group":"doc","deltas":[{"start":{"row":64,"column":46},"end":{"row":64,"column":47},"action":"remove","lines":["t"]}]}],[{"group":"doc","deltas":[{"start":{"row":64,"column":46},"end":{"row":64,"column":47},"action":"insert","lines":["e"]}]}],[{"group":"doc","deltas":[{"start":{"row":64,"column":47},"end":{"row":64,"column":48},"action":"insert","lines":["t"]}]}],[{"group":"doc","deltas":[{"start":{"row":64,"column":48},"end":{"row":64,"column":49},"action":"insert","lines":["N"]}]}],[{"group":"doc","deltas":[{"start":{"row":64,"column":45},"end":{"row":64,"column":49},"action":"remove","lines":["getN"]},{"start":{"row":64,"column":45},"end":{"row":64,"column":54},"action":"insert","lines":["getName()"]}]}],[{"group":"doc","deltas":[{"start":{"row":47,"column":1},"end":{"row":48,"column":0},"action":"insert","lines":["",""]},{"start":{"row":48,"column":0},"end":{"row":48,"column":1},"action":"insert","lines":["\t"]}]}],[{"group":"doc","deltas":[{"start":{"row":48,"column":1},"end":{"row":49,"column":0},"action":"insert","lines":["",""]},{"start":{"row":49,"column":0},"end":{"row":49,"column":1},"action":"insert","lines":["\t"]}]}],[{"group":"doc","deltas":[{"start":{"row":43,"column":2},"end":{"row":43,"column":3},"action":"remove","lines":["\t"]}]}],[{"group":"doc","deltas":[{"start":{"row":43,"column":1},"end":{"row":43,"column":2},"action":"remove","lines":["\t"]}]}],[{"group":"doc","deltas":[{"start":{"row":43,"column":0},"end":{"row":43,"column":1},"action":"remove","lines":["\t"]}]}],[{"group":"doc","deltas":[{"start":{"row":42,"column":76},"end":{"row":43,"column":0},"action":"remove","lines":["",""]}]}],[{"group":"doc","deltas":[{"start":{"row":42,"column":76},"end":{"row":43,"column":0},"action":"insert","lines":["",""]},{"start":{"row":43,"column":0},"end":{"row":43,"column":3},"action":"insert","lines":["\t\t\t"]}]}],[{"group":"doc","deltas":[{"start":{"row":43,"column":3},"end":{"row":44,"column":0},"action":"insert","lines":["",""]},{"start":{"row":44,"column":0},"end":{"row":44,"column":3},"action":"insert","lines":["\t\t\t"]}]}],[{"group":"doc","deltas":[{"start":{"row":44,"column":3},"end":{"row":47,"column":9},"action":"insert","lines":["\t\t\tif entitiyOverload == float('inf'):","\t\t\t\toverloadFactor = entitiyOverload","\t\t\t\tlogging.info(\"%s is overloaded\" % entity.getName())","\t\t\t\tbreak"]}]}],[{"group":"doc","deltas":[{"start":{"row":47,"column":9},"end":{"row":48,"column":0},"action":"insert","lines":["",""]},{"start":{"row":48,"column":0},"end":{"row":48,"column":4},"action":"insert","lines":["\t\t\t\t"]},{"start":{"row":48,"column":3},"end":{"row":48,"column":4},"action":"remove","lines":["\t"]}]}],[{"group":"doc","deltas":[{"start":{"row":44,"column":3},"end":{"row":44,"column":6},"action":"remove","lines":["\t\t\t"]}]}],[{"group":"doc","deltas":[{"start":{"row":46,"column":38},"end":{"row":46,"column":44},"action":"remove","lines":["entity"]},{"start":{"row":46,"column":38},"end":{"row":46,"column":54},"action":"insert","lines":["entity['ENTITY']"]}]}],[{"group":"doc","deltas":[{"start":{"row":54,"column":0},"end":{"row":54,"column":1},"action":"remove","lines":["\t"]}]}],[{"group":"doc","deltas":[{"start":{"row":53,"column":1},"end":{"row":54,"column":0},"action":"remove","lines":["",""]}]}],[{"group":"doc","deltas":[{"start":{"row":53,"column":0},"end":{"row":53,"column":1},"action":"remove","lines":["\t"]}]}],[{"group":"doc","deltas":[{"start":{"row":52,"column":1},"end":{"row":53,"column":0},"action":"remove","lines":["",""]}]}],[{"group":"doc","deltas":[{"start":{"row":51,"column":23},"end":{"row":51,"column":24},"action":"remove","lines":["\t"]}]}],[{"group":"doc","deltas":[{"start":{"row":51,"column":22},"end":{"row":51,"column":23},"action":"remove","lines":["r"]}]}],[{"group":"doc","deltas":[{"start":{"row":51,"column":22},"end":{"row":51,"column":23},"action":"insert","lines":["r"]}]}],[{"group":"doc","deltas":[{"start":{"row":51,"column":23},"end":{"row":51,"column":24},"action":"insert","lines":["o"]}]}],[{"group":"doc","deltas":[{"start":{"row":51,"column":24},"end":{"row":51,"column":25},"action":"insert","lines":["u"]}]}],[{"group":"doc","deltas":[{"start":{"row":51,"column":25},"end":{"row":51,"column":26},"action":"insert","lines":["h"]}]}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":47,"column":9},"end":{"row":48,"column":3},"isBackwards":true},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1430567953079}